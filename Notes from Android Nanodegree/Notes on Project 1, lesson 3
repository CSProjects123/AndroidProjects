					NOTES ON LESSON 3 OF PROJECT 1 

We want to be able to detect a click on an list item in the weather app. To do so, we should use 
setOnItemClickListener(AdapterView.OnItemClickListener listener)


Note-  command and arrow to rotate android screen. 


Note - you need to type in the whole function sometimes for the "override" to take effect. 

Secondly, that weird thing when a new method/class is declared inside the parameter list of another function is called instantiating in place. 

the first thing is that on a listview, we set a setOnItemClickListener. So that we can listen to whatever element of the listview is being cliked. The setOnItemclickListener takes in a AdapterView.OnItemClickListener, which is a interface (AdapterView.OnItemClickListener : Interface definition for a callback to be invoked when an item in this AdapterView has been clicked).

So we defined  NEW adapterview.onItemClickListener and set it on the listview using the function setonItemClickListner. 

Now the adapterview.OnItemCLickListener interface needs the function onItemClick implemented. 


note that this is different from the adapter that has already been set on the ListView in the beginning. This adapter has the .getItem(int) function that we use to the get the position of the clicked list item. 



GITHUB branch for reference: https://github.com/udacity/Sunshine-Version-2/tree/3.02_create_detail_activity


We use "intent" to identify the target activity we need to move to. There are explicit intents ( name of file) , and implicit intents (which just specify something that needs to be done on some data; some intents which are supported are present on the android site. an example of an intent would be to look up details of a contact.)


SERVICE:
A Service is an application component that can perform long-running operations in the background and does not provide a user interface. Another application component can start a service and it will continue to run in the background even if the user switches to another application. Additionally, a component can bind to a service to interact with it and even perform interprocess communication (IPC). For example, a service might handle network transactions, play music, perform file I/O, or interact with a content provider, all from the background.
A service can essentially take two forms:
Started
A service is "started" when an application component (such as an activity) starts it by calling startService(). Once started, a service can run in the background indefinitely, even if the component that started it is destroyed. Usually, a started service performs a single operation and does not return a result to the caller. For example, it might download or upload a file over the network. When the operation is done, the service should stop itself.
Bound
A service is "bound" when an application component binds to it by calling bindService(). A bound service offers a client-server interface that allows components to interact with the service, send requests, get results, and even do so across processes with interprocess communication (IPC). A bound service runs only as long as another application component is bound to it. Multiple components can bind to the service at once, but when all of them unbind, the service is destroyed.


There is a framework for setings that can and should be leveraged. 

for gingerbread- preferenceActivity 
later - PreferenceFragemnet 


In Final project, I will have the option of using wizard in Android Studio to create new Settings Activity. The code provided here will be backwards compatible by using both PreferenceActivity and PreferenceFragment.



if you use MainActivity as parentActivity, when you hit the back button you will be taken to the main page. 


to get ot the Settings Activity, we added an intent in the onOptionsItemSelected fucntion. 

in displaying settings, we create an xml directory and an xml file. the root element in the xml file should be PreferenceScreen 

Udacity gave me code for the SettingsActivity class. The SettingsActivity extends PreferenceActivity and implements interface Preference.OnPreferenceChangeListener.


So I think once we add preference from the xml file in the onCreate fucntion in the activity, we have to set a Listener on it so that the UI can be updated. We get the specific preference on which we want to add the listener using the findPreference function (the preference we are looking for is "location")

We initialize the Listener on the preference with the current value. We call the fucntion onPreferenceChange (with paramteres - preference and a value) so that updates can happen.



Major Exercise - adding funj ksdjv ksdj vkjsd nkvjsdnvkjnskdjvnskdjnvksjndvkjnkjans c,m aKSCkjhwdv jherldsvocjndmctionality to change temperature units. 

1. I added an item in forecastFragment.xml and get the option to show up. 
2. You need this to display the current setting, but I can come back to this later. 
3. This is actually wrong. Right now, I creating a new option in the menu. What I want to do is to create a new option in the settigns menu. 
4. So, I got a new option added to the settings menu and used list perference to do so. 
5. No I want to get the list Preference back and use it to manipulate the temperature data.
// at thispoint I've got the temperature selected by the user. What I had done was to add a listener to the preference identified by the "key" ( i.e. key of the listPreference.)
Now, I need to use this to update the UI. 

// YOu need to look at the stack trace when teh app crashes and see WHAT the issue is !


I dont see what was different. I tried the same fucntion to get the inputted string: 
        String unitType = prefs.getString(getString(R.string.pref_units_key), getString(R.string.pref_units_metric));





Sometimes, restarting can actually solve the problem, for example - getting the deugger to show up. 


IMPLICIT INTENTS 



So basically you need to remember the following code sequence: 
Uri mapUri = Uri.parse("geo:0,0?").buildUpon().appendQueryParameter("q", postalCode).build();
            Intent mapIntent = new Intent(Intent.ACTION_VIEW);
            mapIntent.setData(mapUri);
            if (mapIntent.resolveActivity(getPackageManager()) != null) {
                Log.v("map intent1234", "map intent1234");
                startActivity(mapIntent);
            }



The way the system knows whic app to lauch for a particular activity is to have an intent filter, which can optionally contain a scheme (such as geo). If more than one app is present, user is given a preference. 



There is something called "receivers" that can listen to broadcasts ("system is rebooting" for example)

To have your service staert listening for broascasts, you need to register it. There are two ways of doing so: 
1. Either make an entry in the manifest 
2. dynamically, in some application component, typically an activity. 

Both these methods require you to specify teh intent filter. 

Major difference between these two is when they are triggered. 

in manifest- basically always listening - for example, you need something from Google Cloud Messaging - GCM
dynamicaly- kistening only when your app is running.

Note - you can use this manifest method to wait until you have good internet connectivity and them start the tasks that require good internet connectivity 





